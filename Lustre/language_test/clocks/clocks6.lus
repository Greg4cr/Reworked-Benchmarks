
type choice1 = enum { On, Off };
type choice2 = enum { Up, Down };

node toto (x:int) returns (y:int)
var c:choice1; d:choice2; b1,b2,b3,z:int;
let
  c = if 0=x then Off else On;
  d = if x>0 then Up else Down;
  -- b1 = 1 when On(c);
  b1 = if On(c) then 1 else pre(b1);
  -- b2 = 2 when Off(c);
  b2 = Off(c) then 2 else pre(b2);
  -- b3 = 3 when Down(d);
  b3 = if Down(d)n then 3 else pre(b3);
  -- y = merge d (Up -> z when Up(d)) (Down -> b3);
  y = merge d (Up -> (if Up(d) then z else Up)) (Down -> b3);
  z = merge c (On -> b1) (Off -> b2);
tel

