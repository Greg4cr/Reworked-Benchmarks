
node top(e01: bool; 
      e02: bool; 
      e03: bool; 
      e04: bool; 
      e05: bool; 
      e06: bool; 
      e07: bool; 
      e08: bool; 
      e09: bool; 
      e10: bool; 
      e11: bool; 
      e12: bool)
   returns (OK: bool);

var
   rtp_g01: bool; 
   rtp_g02: bool; 
   rtp_g03: bool; 
   rtp_g04: bool; 
   rtp_g05: bool; 
   rtp_g06: bool; 
   rtp_g07: bool; 
   rtp_g08: bool; 
   rtp_g09: bool; 
   rtp_g10: bool; 
   rtp_g11: bool; 
   rtp_g12: bool; 
   rtp_X1: int; 
   rtp_X2: int; 
   rtp_X3: int; 
   rtp_X4: int; 
   rtp_X5: int; 
   rtp_X6: int; 
   rtp_X7: int; 
   rtp_X8: int; 
   rtp_X9: int; 
   Sofar_X: bool; 
   Sofar_Sofar: bool;


let 
   rtp_g01 = ((pre rtp_X1) >= 1);

   rtp_g02 = ((pre rtp_X2) >= 1);

   rtp_g03 = ((pre rtp_X3) >= 1);

   rtp_g04 = ((pre rtp_X4) >= 1);

   rtp_g05 = ((pre rtp_X4) >= 1);

   rtp_g06 = ((pre rtp_X5) >= 1);

   rtp_g07 = ((pre rtp_X6) >= 1);

   rtp_g08 = ((pre rtp_X6) >= 1);

   rtp_g09 = ((pre rtp_X6) >= 1);

   rtp_g10 = ((pre rtp_X7) >= 1);

   rtp_g11 = ((pre rtp_X8) >= 1);

   rtp_g12 = ((pre rtp_X9) >= 1);

   rtp_X1 = (1 -> 
      (if e01
         then 
               (if rtp_g01
                  then ((pre rtp_X1) - 1)
                  else (pre rtp_X1))
         else (pre rtp_X1)));

   rtp_X2 = (0 -> 
      (if e01
         then 
               (if rtp_g01
                  then ((pre rtp_X2) + 1)
                  else (pre rtp_X2))
         else 
      (if e02
         then 
               (if rtp_g02
                  then ((pre rtp_X2) - 1)
                  else (pre rtp_X2))
         else 
      (if e12
         then 
               (if rtp_g12
                  then ((pre rtp_X2) + 1)
                  else (pre rtp_X2))
         else (pre rtp_X2)))));

   rtp_X3 = (0 -> 
      (if e02
         then 
               (if rtp_g02
                  then ((pre rtp_X3) + 1)
                  else (pre rtp_X3))
         else 
      (if e03
         then 
               (if rtp_g03
                  then ((pre rtp_X3) - 1)
                  else (pre rtp_X3))
         else (pre rtp_X3))));

   rtp_X4 = (0 -> 
      (if e03
         then 
               (if rtp_g03
                  then ((pre rtp_X4) + 1)
                  else (pre rtp_X4))
         else 
      (if e04
         then 
               (if rtp_g04
                  then ((pre rtp_X4) - 1)
                  else (pre rtp_X4))
         else 
      (if e05
         then 
               (if rtp_g05
                  then ((pre rtp_X4) - 1)
                  else (pre rtp_X4))
         else (pre rtp_X4)))));

   rtp_X5 = (0 -> 
      (if e04
         then 
               (if rtp_g04
                  then ((pre rtp_X5) + 1)
                  else (pre rtp_X5))
         else 
      (if e06
         then 
               (if rtp_g06
                  then ((pre rtp_X5) - 1)
                  else (pre rtp_X5))
         else (pre rtp_X5))));

   rtp_X6 = (0 -> 
      (if e06
         then 
               (if rtp_g06
                  then ((pre rtp_X6) + 1)
                  else (pre rtp_X6))
         else 
      (if e07
         then 
               (if rtp_g07
                  then ((pre rtp_X6) - 1)
                  else (pre rtp_X6))
         else 
      (if e08
         then 
               (if rtp_g08
                  then ((pre rtp_X6) - 1)
                  else (pre rtp_X6))
         else 
      (if e09
         then 
               (if rtp_g09
                  then ((pre rtp_X6) - 1)
                  else (pre rtp_X6))
         else (pre rtp_X6))))));

   rtp_X7 = (0 -> 
      (if e08
         then 
               (if rtp_g08
                  then ((pre rtp_X7) + 1)
                  else (pre rtp_X7))
         else 
      (if e10
         then 
               (if rtp_g10
                  then ((pre rtp_X7) - 1)
                  else (pre rtp_X7))
         else (pre rtp_X7))));

   rtp_X8 = (0 -> 
      (if e09
         then 
               (if rtp_g09
                  then ((pre rtp_X8) + 1)
                  else (pre rtp_X8))
         else 
      (if e11
         then 
               (if rtp_g11
                  then ((pre rtp_X8) - 1)
                  else (pre rtp_X8))
         else (pre rtp_X8))));

   rtp_X9 = (0 -> 
      (if e05
         then 
               (if rtp_g05
                  then ((pre rtp_X9) + 1)
                  else (pre rtp_X9))
         else 
      (if e07
         then 
               (if rtp_g07
                  then ((pre rtp_X9) + 1)
                  else (pre rtp_X9))
         else 
      (if e10
         then 
               (if rtp_g10
                  then ((pre rtp_X9) + 1)
                  else (pre rtp_X9))
         else 
      (if e11
         then 
               (if rtp_g11
                  then ((pre rtp_X9) + 1)
                  else (pre rtp_X9))
         else 
      (if e12
         then 
               (if rtp_g12
                  then ((pre rtp_X9) - 1)
                  else (pre rtp_X9))
         else (pre rtp_X9)))))));

   Sofar_X = (((((((((((((((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12)) or 
      (((((((((((e01 and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      e02) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      e03) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      e04) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      e05) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      e06) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      e07) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      e08) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      e09) and 
      (not e10)) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      e10) and 
      (not e11)) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      e11) and 
      (not e12))) or 
      ((((((((((((not e01) and 
      (not e02)) and 
      (not e03)) and 
      (not e04)) and 
      (not e05)) and 
      (not e06)) and 
      (not e07)) and 
      (not e08)) and 
      (not e09)) and 
      (not e10)) and 
      (not e11)) and 
      e12)) and 
      (rtp_X3 < 32767));

   Sofar_Sofar = (Sofar_X -> (Sofar_X and 
      (pre Sofar_Sofar)));

   OK = ((not Sofar_Sofar) or 
      (rtp_X3 >= 0));

tel;


