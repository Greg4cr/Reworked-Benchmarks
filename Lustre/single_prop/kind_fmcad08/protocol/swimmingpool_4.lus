
node top(e1: bool; 
      e2: bool; 
      e3: bool; 
      e4: bool; 
      e5: bool; 
      e6: bool; 
      init_p1: int; 
      init_p2: int)
   returns (OK: bool);

var
   swimingpool_g1: bool; 
   swimingpool_g2: bool; 
   swimingpool_g3: bool; 
   swimingpool_g4: bool; 
   swimingpool_g5: bool; 
   swimingpool_g6: bool; 
   swimingpool_x1: int; 
   swimingpool_x2: int; 
   swimingpool_x3: int; 
   swimingpool_x4: int; 
   swimingpool_x5: int; 
   swimingpool_x6: int; 
   swimingpool_x7: int; 
   swimingpool_p1: int; 
   swimingpool_p2: int; 
   First_First3: int; 
   First_First2: int; 
   First_First1: int; 
   First_First: int; 
   Sofar_Sofar: bool; 
   rlt_excludes6_excludes: bool;


let 
   swimingpool_g1 = (false -> ((pre swimingpool_x6) >= 1));

   swimingpool_g2 = (false -> (((pre swimingpool_x1) >= 1) and 
      ((pre swimingpool_x7) >= 1)));

   swimingpool_g3 = (false -> ((pre swimingpool_x2) >= 1));

   swimingpool_g4 = (false -> (((pre swimingpool_x3) >= 1) and 
      ((pre swimingpool_x6) >= 1)));

   swimingpool_g5 = (false -> ((pre swimingpool_x4) >= 1));

   swimingpool_g6 = (false -> ((pre swimingpool_x5) >= 1));

   swimingpool_x1 = (0 -> 
      (if e1
         then 
               (if swimingpool_g1
                  then ((pre swimingpool_x1) + 1)
                  else (pre swimingpool_x1))
         else 
      (if e2
         then 
               (if swimingpool_g2
                  then ((pre swimingpool_x1) - 1)
                  else (pre swimingpool_x1))
         else (pre swimingpool_x1))));

   swimingpool_x2 = (0 -> 
      (if e2
         then 
               (if swimingpool_g2
                  then ((pre swimingpool_x2) + 1)
                  else (pre swimingpool_x2))
         else 
      (if e3
         then 
               (if swimingpool_g3
                  then ((pre swimingpool_x2) - 1)
                  else (pre swimingpool_x2))
         else (pre swimingpool_x2))));

   swimingpool_x3 = (0 -> 
      (if e3
         then 
               (if swimingpool_g3
                  then ((pre swimingpool_x3) + 1)
                  else (pre swimingpool_x3))
         else 
      (if e4
         then 
               (if swimingpool_g4
                  then ((pre swimingpool_x3) - 1)
                  else (pre swimingpool_x3))
         else (pre swimingpool_x3))));

   swimingpool_x4 = (0 -> 
      (if e4
         then 
               (if swimingpool_g4
                  then ((pre swimingpool_x4) + 1)
                  else (pre swimingpool_x4))
         else 
      (if e5
         then 
               (if swimingpool_g4
                  then ((pre swimingpool_x4) - 1)
                  else (pre swimingpool_x4))
         else (pre swimingpool_x4))));

   swimingpool_x5 = (0 -> 
      (if e5
         then 
               (if swimingpool_g5
                  then ((pre swimingpool_x5) + 1)
                  else (pre swimingpool_x5))
         else 
      (if e6
         then 
               (if swimingpool_g6
                  then ((pre swimingpool_x5) - 1)
                  else (pre swimingpool_x5))
         else (pre swimingpool_x5))));

   swimingpool_x6 = (swimingpool_p1 -> 
      (if e1
         then 
               (if swimingpool_g1
                  then ((pre swimingpool_x6) - 1)
                  else (pre swimingpool_x6))
         else 
      (if e3
         then 
               (if swimingpool_g3
                  then ((pre swimingpool_x6) + 1)
                  else (pre swimingpool_x6))
         else 
      (if e4
         then 
               (if swimingpool_g4
                  then ((pre swimingpool_x6) - 1)
                  else (pre swimingpool_x6))
         else 
      (if e6
         then 
               (if swimingpool_g6
                  then ((pre swimingpool_x6) + 1)
                  else (pre swimingpool_x6))
         else (pre swimingpool_x6))))));

   swimingpool_x7 = (swimingpool_p2 -> 
      (if e2
         then 
               (if swimingpool_g2
                  then ((pre swimingpool_x7) - 1)
                  else (pre swimingpool_x7))
         else 
      (if e5
         then 
               (if swimingpool_g5
                  then ((pre swimingpool_x7) + 1)
                  else (pre swimingpool_x7))
         else (pre swimingpool_x7))));

   swimingpool_p1 = (init_p1 -> (pre swimingpool_p1));

   swimingpool_p2 = (init_p2 -> (pre swimingpool_p2));

   OK = ((not ((((Sofar_Sofar and 
      (0 <= First_First)) and 
      (0 <= First_First1)) and 
      (First_First2 < 1000)) and 
      (First_First3 < 1000))) or 
      (swimingpool_x3 < 1));

   First_First3 = (init_p2 -> (pre First_First3));

   First_First2 = (init_p1 -> (pre First_First2));

   First_First1 = (init_p2 -> (pre First_First1));

   First_First = (init_p1 -> (pre First_First));

   Sofar_Sofar = (rlt_excludes6_excludes -> (rlt_excludes6_excludes and 
      (pre Sofar_Sofar)));

   rlt_excludes6_excludes = ((((((((((((not e1) and 
      (not e2)) and 
      (not e3)) and 
      (not e4)) and 
      (not e5)) and 
      (not e6)) or 
      (((((e1 and 
      (not e2)) and 
      (not e3)) and 
      (not e4)) and 
      (not e5)) and 
      (not e6))) or 
      ((((((not e1) and 
      e2) and 
      (not e3)) and 
      (not e4)) and 
      (not e5)) and 
      (not e6))) or 
      ((((((not e1) and 
      (not e2)) and 
      e3) and 
      (not e4)) and 
      (not e5)) and 
      (not e6))) or 
      ((((((not e1) and 
      (not e2)) and 
      (not e3)) and 
      e4) and 
      (not e5)) and 
      (not e6))) or 
      ((((((not e1) and 
      (not e2)) and 
      (not e3)) and 
      (not e4)) and 
      e5) and 
      (not e6))) or 
      ((((((not e1) and 
      (not e2)) and 
      (not e3)) and 
      (not e4)) and 
      (not e5)) and 
      e6));

tel;


