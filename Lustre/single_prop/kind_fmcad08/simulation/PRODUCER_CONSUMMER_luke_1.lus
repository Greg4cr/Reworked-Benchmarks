
node top(etat1: bool; 
      etat2: bool; 
      etat3: bool; 
      a_init: int)
   returns (OK: bool);

var
   PRODUCER_CONSUMMER_garde1: bool; 
   PRODUCER_CONSUMMER_garde2: bool; 
   PRODUCER_CONSUMMER_garde3: bool; 
   PRODUCER_CONSUMMER_i: int; 
   PRODUCER_CONSUMMER_b: int; 
   PRODUCER_CONSUMMER_a: int; 
   PRODUCER_CONSUMMER_o1: int; 
   PRODUCER_CONSUMMER_o2: int; 
   First_First: int; 
   Sofar_Sofar: bool; 
   excludes3_excludes: bool;


let 
   PRODUCER_CONSUMMER_garde1 = ((pre PRODUCER_CONSUMMER_i) >= 1);

   PRODUCER_CONSUMMER_garde2 = ((pre PRODUCER_CONSUMMER_b) >= 1);

   PRODUCER_CONSUMMER_garde3 = ((pre PRODUCER_CONSUMMER_b) >= 1);

   PRODUCER_CONSUMMER_i = (PRODUCER_CONSUMMER_a -> 
      (if etat1
         then 
               (if PRODUCER_CONSUMMER_garde1
                  then ((pre PRODUCER_CONSUMMER_i) - 1)
                  else (pre PRODUCER_CONSUMMER_i))
         else (pre PRODUCER_CONSUMMER_i)));

   PRODUCER_CONSUMMER_b = (0 -> 
      (if etat1
         then 
               (if PRODUCER_CONSUMMER_garde1
                  then ((pre PRODUCER_CONSUMMER_b) + 1)
                  else (pre PRODUCER_CONSUMMER_b))
         else 
      (if etat2
         then 
               (if PRODUCER_CONSUMMER_garde2
                  then ((pre PRODUCER_CONSUMMER_b) - 1)
                  else (pre PRODUCER_CONSUMMER_b))
         else 
      (if PRODUCER_CONSUMMER_garde3
         then ((pre PRODUCER_CONSUMMER_b) - 1)
         else (pre PRODUCER_CONSUMMER_b)))));

   PRODUCER_CONSUMMER_a = (a_init -> (pre PRODUCER_CONSUMMER_a));

   PRODUCER_CONSUMMER_o1 = (0 -> 
      (if etat2
         then 
               (if PRODUCER_CONSUMMER_garde2
                  then ((pre PRODUCER_CONSUMMER_o1) + 1)
                  else (pre PRODUCER_CONSUMMER_o1))
         else (pre PRODUCER_CONSUMMER_o1)));

   PRODUCER_CONSUMMER_o2 = (0 -> 
      (if etat3
         then 
               (if PRODUCER_CONSUMMER_garde3
                  then ((pre PRODUCER_CONSUMMER_o2) + 1)
                  else (pre PRODUCER_CONSUMMER_o2))
         else (pre PRODUCER_CONSUMMER_o2)));

   OK = ((not ((Sofar_Sofar and 
      (First_First > 0)) and 
      ((not etat1) -> true))) or 
      (true -> ((not ((pre etat1) and 
      etat2)) or 
      (PRODUCER_CONSUMMER_o1 = ((pre PRODUCER_CONSUMMER_o1) + 1)))));

   First_First = (a_init -> (pre First_First));

   Sofar_Sofar = (excludes3_excludes -> (excludes3_excludes and 
      (pre Sofar_Sofar)));

   excludes3_excludes = (not (((etat1 and 
      etat2) or 
      (etat1 and 
      etat3)) or 
      (etat2 and 
      etat3)));

tel;


