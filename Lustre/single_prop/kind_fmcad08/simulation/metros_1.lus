
node top(B0: bool; 
      B1: bool; 
      S: bool)
   returns (OK: bool);

var
   hypothese_c1: int; 
   hypothese_ok1: bool; 
   hypothese_c: int; 
   hypothese_ok: bool; 
   controleur_diff1: int; 
   controleur_avance1: bool; 
   controleur_retard1: bool; 
   controleur_diff: int; 
   controleur_avance: bool; 
   controleur_retard: bool; 
   main_nB0: int; 
   main_nB1: int; 
   main_nS: int; 
   Sofar_X: bool; 
   Sofar_Sofar: bool; 
   pOK: bool;


let 
   main_nB0 = (0 -> 
      (if B0
         then ((pre main_nB0) + 1)
         else (pre main_nB0)));

   main_nB1 = (0 -> 
      (if B1
         then ((pre main_nB1) + 1)
         else (pre main_nB1)));

   main_nS = (0 -> 
      (if S
         then ((pre main_nS) + 1)
         else (pre main_nS)));

   hypothese_ok1 = (true -> (
      (if (pre controleur_retard1)
         then (not S)
         else true) and 
      
      (if ((pre hypothese_c1) >= 9)
         then (not B0)
         else true)));

   hypothese_c1 = (0 -> 
      (if ((pre controleur_avance1) and 
         controleur_avance1)
         then 
               (if B0
                  then ((pre hypothese_c1) + 1)
                  else (pre hypothese_c1))
         else 0));

   hypothese_ok = (true -> (
      (if (pre controleur_retard)
         then (not S)
         else true) and 
      
      (if ((pre hypothese_c) >= 9)
         then (not B1)
         else true)));

   hypothese_c = (0 -> 
      (if ((pre controleur_avance) and 
         controleur_avance)
         then 
               (if B1
                  then ((pre hypothese_c) + 1)
                  else (pre hypothese_c))
         else 0));

   controleur_diff1 = (main_nB0 - main_nS);

   controleur_avance1 = (false -> 
      (if (not (pre controleur_avance1))
         then (controleur_diff1 >= 10)
         else (controleur_diff1 > 0)));

   controleur_retard1 = (false -> 
      (if (not (pre controleur_retard1))
         then (controleur_diff1 <= (-10))
         else (controleur_diff1 < 0)));

   controleur_diff = (main_nB1 - main_nS);

   controleur_avance = (false -> 
      (if (not (pre controleur_avance))
         then (controleur_diff >= 10)
         else (controleur_diff > 0)));

   controleur_retard = (false -> 
      (if (not (pre controleur_retard))
         then (controleur_diff <= (-10))
         else (controleur_diff < 0)));

   pOK = (true -> (not (((pre controleur_avance1) and 
      controleur_retard1) or 
      ((pre controleur_retard1) and 
      controleur_avance1))));

   OK = ((not Sofar_Sofar) or 
      (true -> (pre pOK)));

   Sofar_X = (((((hypothese_ok1 and 
      hypothese_ok) and 
      (main_nB0 < 1)) and 
      (main_nB1 < 1)) and 
      (main_nS < 1)) and 
      (controleur_diff1 < 32767));

   Sofar_Sofar = (Sofar_X -> (Sofar_X and 
      (pre Sofar_Sofar)));

tel;


