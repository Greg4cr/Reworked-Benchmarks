
node top(MaySafelyMove: bool; 
      TryToMove1: bool; 
      TryToMove2: bool)
   returns (OK: bool);

var
   sustain_on: bool; 
   sustain_s: bool; 
   redge_signal5: bool; 
   redge_r5: bool; 
   redge_signal4: bool; 
   redge_r4: bool; 
   redge_r3: bool; 
   redge_r2: bool; 
   redge_signal1: bool; 
   redge_r1: bool; 
   redge_signal: bool; 
   redge_r: bool; 
   MayMove1: bool; 
   MayMove2: bool; 
   stop: bool;


let 
   MayMove1 = (TryToMove1 and 
      MaySafelyMove);

   MayMove2 = (TryToMove2 and 
      MaySafelyMove);

   sustain_on = (redge_r5 and 
      redge_r4);

   sustain_s = (sustain_on -> 
      (if sustain_on
         then true
         else 
      (if stop
         then false
         else (pre sustain_s))));

   redge_signal5 = (MayMove1 and 
      (true -> (pre (not TryToMove2))));

   redge_r5 = (redge_signal5 -> (redge_signal5 and 
      (pre (not redge_signal5))));

   redge_signal4 = (MayMove2 and 
      (true -> (pre (not TryToMove1))));

   redge_r4 = (redge_signal4 -> (redge_signal4 and 
      (pre (not redge_signal4))));

   stop = (redge_r and 
      redge_r1);

   OK = (true -> 
      (if ((not redge_r2) or 
         (not redge_r3))
         then ((((((not redge_r5) and 
               (not redge_r4)) or 
               ((not redge_r4) and 
               (not stop))) or 
               ((not redge_r5) and 
               (not stop))) and 
               (not ((redge_r5 and 
               redge_r4) and 
               stop))) and 
               
               (if sustain_s
                  then MaySafelyMove
                  else true))
         else true));

   redge_r3 = (TryToMove2 -> (TryToMove2 and 
      (pre (not TryToMove2))));

   redge_r2 = (TryToMove1 -> (TryToMove1 and 
      (pre (not TryToMove1))));

   redge_signal1 = (not MayMove2);

   redge_r1 = (redge_signal1 -> (redge_signal1 and 
      (pre (not redge_signal1))));

   redge_signal = (not MayMove1);

   redge_r = (redge_signal -> (redge_signal and 
      (pre (not redge_signal))));

tel;


