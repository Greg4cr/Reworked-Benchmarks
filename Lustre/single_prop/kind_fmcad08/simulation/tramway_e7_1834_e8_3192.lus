
node top(request_door: bool; 
      warning_start: bool; 
      in_station: bool; 
      door_is_open: bool)
   returns (OK: bool);

var
   switch_value1: bool; 
   jafter_after2: bool; 
   jafter_after1: bool; 
   edge_X6: bool; 
   edge_edge6: bool; 
   jafter_after3: bool; 
   edge_edge5: bool; 
   edge_X4: bool; 
   edge_edge4: bool; 
   edge_X3: bool; 
   edge_edge3: bool; 
   jafter_after: bool; 
   edge_X2: bool; 
   edge_edge2: bool; 
   edge_X1: bool; 
   edge_edge1: bool; 
   edge_edge: bool; 
   environment_env_ok: bool; 
   environment_door_initially_closed: bool; 
   environment_initially_not_in_station: bool; 
   environment_env_always_ok: bool; 
   switch_value: bool; 
   controller_open_door: bool;


let 
   OK = ((not environment_env_always_ok) or 
      (((not door_is_open) or 
      in_station) and 
      (not (switch_value1 and 
      edge_edge6))));

   switch_value1 = 
      (if jafter_after3
         then true
         else 
      (if jafter_after2
         then false
         else (false -> (pre switch_value1))));

   jafter_after2 = (false -> (pre jafter_after1));

   jafter_after1 = (false -> (pre door_is_open));

   edge_X6 = (not in_station);

   edge_edge6 = (false -> (edge_X6 and 
      (not (pre edge_X6))));

   jafter_after3 = (false -> (pre (request_door and 
      (not warning_start))));

   environment_env_always_ok = (environment_env_ok -> (environment_env_ok and 
      (pre environment_env_always_ok)));

   environment_env_ok = (((((((((not edge_edge1) or 
      (warning_start and 
      door_is_open)) and 
      ((not edge_edge) or 
      controller_open_door)) and 
      ((not edge_edge2) or 
      jafter_after)) and 
      environment_door_initially_closed) and 
      environment_initially_not_in_station) and 
      (edge_edge3 = edge_edge4)) and 
      ((not warning_start) or 
      in_station)) and 
      ((not edge_edge5) or 
      (not controller_open_door)));

   environment_door_initially_closed = ((not door_is_open) -> true);

   environment_initially_not_in_station = ((not in_station) -> true);

   edge_edge5 = (false -> (warning_start and 
      (not (pre warning_start))));

   edge_X4 = (not warning_start);

   edge_edge4 = (false -> (edge_X4 and 
      (not (pre edge_X4))));

   edge_X3 = (not in_station);

   edge_edge3 = (false -> (edge_X3 and 
      (not (pre edge_X3))));

   jafter_after = (false -> (pre ((not door_is_open) and 
      warning_start)));

   edge_X2 = (not in_station);

   edge_edge2 = (false -> (edge_X2 and 
      (not (pre edge_X2))));

   edge_X1 = (not door_is_open);

   edge_edge1 = (false -> (edge_X1 and 
      (not (pre edge_X1))));

   edge_edge = (false -> (door_is_open and 
      (not (pre door_is_open))));

   switch_value = 
      (if (request_door and 
         (not warning_start))
         then true
         else 
      (if door_is_open
         then false
         else (false -> (pre switch_value))));

   controller_open_door = (switch_value and 
      in_station);

tel;


